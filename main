#!/usr/bin/env ruby

Dir.chdir File.dirname(__FILE__)

require 'ui/sdl'

begin
  require 'rubygems'
rescue LoadError
  # Ignore
end

require 'cc/logger'
require 'cc/singleton'
require 'cc/sound'
require 'control-board/input'
require 'control-board/input-delayed'
require 'control-board/video-selector'
require 'db/models'
require 'ssp/camera'

class Main
  def initialize
    @mode = :normal

    @log = CC::Logger.singleton
    @log.level = Logger::DEBUG

    @input = ControlBoard::Input.singleton
    @input_delayed = ControlBoard::InputDelayed.singleton

    @video_selector = ControlBoard::VideoSelector.singleton

    @active_camera = SspCamera.find_or_create_by_dev 1

    setup_normal_callbacks
    setup_teach_callbacks

    @ui = UI::SDL.new

    goto "rest"

    CC::Sound.info

    main_loop
  end

  private

  def main_loop
    motion = [0, 0, 0]
    motion_stopped = true

    while [:normal, :teach].include? @mode
      @input.scan

      @ui.iterate
      @ui.flush_queue.each do |args|
        cmd = args.shift

        case cmd
        when :quit
          @mode = :quit

        when :mode
          @mode = args.first
          @log.info "Switching to mode #{@mode}"

          CC::Sound.info

        when :switch_camera
          num = args.first
          cam = SspCamera.find_by_dev num+1
          if cam
            @video_selector.select num
            @active_camera = cam
          end

        when :menu
          SSP::Camera.singleton(@active_camera.dev).menu

        when :enter
          SSP::Camera.singleton(@active_camera.dev).enter

        when :save
          target = args.first
          save target

        when :motion
          type, speed = args

          case type
          when :pan
            motion[0] = 4*speed
          when :tilt
            motion[1] = 2*speed
          when :zoom
            motion[2] = speed
          end
        end
      end

      if motion_stopped and motion != [0, 0, 0]
        motion_stopped = false
      end

      unless motion_stopped
        SSP::Camera.singleton(@active_camera.dev).move *motion
      end

      if not motion_stopped and motion == [0, 0, 0]
        motion_stopped = true
      end
    end
  end

  def setup_normal_callbacks
    @input_delayed.add_callback :press do |keypress|
      goto "seat-#{keypress.y},#{keypress.x}" if @mode == :normal
    end

    @input_delayed.add_callback :cancel do |keypress|
      goto "rest" if @mode == :normal
    end
  end

  def setup_teach_callbacks
    @input.add_callback do |keypress|
      if @mode == :teach and keypress.state
        save "seat-#{keypress.y},#{keypress.x}"
      end
    end
  end

  def goto target_name
    @log.info "Going to target #{target_name.inspect}"

    target = Target.find_by_name target_name
    if target.nil?
      @log.warn "Target #{target_name.inspect} not found"
      return
    end

    slot = target.ssp_camera_slot
    if slot.nil?
      @log.warn "Target #{target_name.inspect} has no SSP camera slot"
      return
    end

    dev_id  = slot.ssp_camera.dev
    slot_id = slot.slot

    video_id = dev_id-1
    @video_selector.select video_id

    @active_camera = slot.ssp_camera

    SSP::Camera.singleton(dev_id).preset_goto slot_id
  end

  def save target_name
    @log.info "Saving target #{target_name.inspect}"

    target = Target.find_or_create_by_name target_name
    target.allocate_slot @active_camera

    SSP::Camera.singleton(@active_camera.dev).preset_set \
      target.ssp_camera_slot.slot

    CC::Sound.info
  end
end

Main.new if $0 == __FILE__

